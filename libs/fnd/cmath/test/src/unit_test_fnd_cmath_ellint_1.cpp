/**
 *	@file	unit_test_fnd_cmath_ellint_1.cpp
 *
 *	@brief	ellint_1 のテスト
 *
 *	@author	myoukaku
 */

#include <bksge/fnd/cmath/ellint_1.hpp>
#include <bksge/fnd/cmath/isnan.hpp>
//#include <bksge/fnd/cmath/isinf.hpp>
#include <bksge/fnd/cmath/abs.hpp>
#include <bksge/fnd/type_traits/is_same.hpp>
#include <bksge/fnd/numbers.hpp>
#include <bksge/fnd/limits.hpp>
#include <gtest/gtest.h>
#include "constexpr_test.hpp"

BKSGE_WARNING_PUSH();
BKSGE_WARNING_DISABLE_MSVC(4305);	// 'initializing': truncation from 'double' to 'T1'

namespace bksge_cmath_test
{

namespace ellint_1_test
{

static_assert(bksge::is_same<float,       decltype(bksge::ellint_1(0.0f, 0.0f))>::value, "");
static_assert(bksge::is_same<double,      decltype(bksge::ellint_1(0.0f, 0.0 ))>::value, "");
static_assert(bksge::is_same<long double, decltype(bksge::ellint_1(0.0f, 0.0l))>::value, "");
static_assert(bksge::is_same<double,      decltype(bksge::ellint_1(0.0f, 0   ))>::value, "");
static_assert(bksge::is_same<double,      decltype(bksge::ellint_1(0.0 , 0.0f))>::value, "");
static_assert(bksge::is_same<double,      decltype(bksge::ellint_1(0.0 , 0.0 ))>::value, "");
static_assert(bksge::is_same<long double, decltype(bksge::ellint_1(0.0 , 0.0l))>::value, "");
static_assert(bksge::is_same<double,      decltype(bksge::ellint_1(0.0 , 0   ))>::value, "");
static_assert(bksge::is_same<long double, decltype(bksge::ellint_1(0.0l, 0.0f))>::value, "");
static_assert(bksge::is_same<long double, decltype(bksge::ellint_1(0.0l, 0.0 ))>::value, "");
static_assert(bksge::is_same<long double, decltype(bksge::ellint_1(0.0l, 0.0l))>::value, "");
static_assert(bksge::is_same<long double, decltype(bksge::ellint_1(0.0l, 0   ))>::value, "");
static_assert(bksge::is_same<double,      decltype(bksge::ellint_1(0   , 0.0f))>::value, "");
static_assert(bksge::is_same<double,      decltype(bksge::ellint_1(0   , 0.0 ))>::value, "");
static_assert(bksge::is_same<long double, decltype(bksge::ellint_1(0   , 0.0l))>::value, "");
static_assert(bksge::is_same<double,      decltype(bksge::ellint_1(0   , 0   ))>::value, "");
static_assert(bksge::is_same<float,       decltype(bksge::ellint_1f(0.0f, 0.0f))>::value, "");
static_assert(bksge::is_same<long double, decltype(bksge::ellint_1l(0.0l, 0.0l))>::value, "");

template <typename T1, typename T2>
void Ellint1TestFloat(double error)
{
	using Promoted = bksge::float_promote_t<T1, T2>;
	BKSGE_CONSTEXPR auto nan1 = bksge::numeric_limits<T1>::quiet_NaN();
	BKSGE_CONSTEXPR auto nan2 = bksge::numeric_limits<T2>::quiet_NaN();
	BKSGE_CONSTEXPR auto eps1 = bksge::numeric_limits<T1>::epsilon();
	BKSGE_CONSTEXPR auto inf  = bksge::numeric_limits<Promoted>::infinity();
	BKSGE_CONSTEXPR auto pi = bksge::pi_t<T2>();

	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1(nan1, nan2)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1(nan1, T2(0))));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1(T1(0), nan2)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1(T1( 1) + eps1, T2(0))));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1(T1(-1) - eps1, T2(0))));

	BKSGE_CXX14_CONSTEXPR_EXPECT_EQ(inf, bksge::ellint_1(T1( 1), -pi/2));
	BKSGE_CXX14_CONSTEXPR_EXPECT_EQ(inf, bksge::ellint_1(T1( 1),  pi/2));
	BKSGE_CXX14_CONSTEXPR_EXPECT_EQ(inf, bksge::ellint_1(T1(-1), -pi/2));
	BKSGE_CXX14_CONSTEXPR_EXPECT_EQ(inf, bksge::ellint_1(T1(-1),  pi/2));

	struct testcase
	{
		double expected;
		T1 k;
		T2 phi;
	};

	testcase const testcases[] =
	{
		{0.0000000000000000, -1.0, 0.0000000000000000},
		{0.1754258296518182, -1.0, 0.17453292519943295},
		{0.3563785047244499, -1.0, 0.34906585039886590},
		{0.5493061443340547, -1.0, 0.52359877559829882},
		{0.7629096520666106, -1.0, 0.69813170079773179},
		{1.0106831886830212, -1.0, 0.87266462599716477},
		{1.3169578969248164, -1.0, 1.0471975511965976},
		{1.7354151626688941, -1.0, 1.2217304763960306},
		{2.4362460537158770, -1.0, 1.3962634015954636},
//		{39.1831385665,      -1.0, 1.5707963267948966},

		{0.0000000000000000, -0.9, 0.0000000000000000},
		{0.1752542737611502, -0.9, 0.17453292519943295},
		{0.3549246459129744, -0.9, 0.34906585039886590},
		{0.5438822141615712, -0.9, 0.52359877559829882},
		{0.7479740042353251, -0.9, 0.69813170079773179},
		{0.9746389845196644, -0.9, 0.87266462599716477},
		{1.2334463254523438, -0.9, 1.0471975511965976},
		{1.5355247765594913, -0.9, 1.2217304763960306},
		{1.8882928567775126, -0.9, 1.3962634015954636},
		{2.2805491384227703, -0.9, 1.5707963267948966},

		{0.0000000000000000, -0.8, 0.0000000000000000},
		{0.1751015424133889, -0.8, 0.17453292519943295},
		{0.3536506883977939, -0.8, 0.34906585039886590},
		{0.5392680440908455, -0.8, 0.52359877559829882},
		{0.7358792602807037, -0.8, 0.69813170079773179},
		{0.9477094297007117, -0.8, 0.87266462599716477},
		{1.1789022995388236, -0.8, 1.0471975511965976},
		{1.4323027881876012, -0.8, 1.2217304763960306},
		{1.7069629739121677, -0.8, 1.3962634015954636},
		{1.9953027776647294, -0.8, 1.5707963267948966},

		{0.0000000000000000, -0.7, 0.0000000000000000},
		{0.1749673746691672, -0.7, 0.17453292519943295},
		{0.3525468753567793, -0.7, 0.34906585039886590},
		{0.5353674027599713, -0.7, 0.52359877559829882},
		{0.7260379765168445, -0.7, 0.69813170079773179},
		{0.9269829634831344, -0.7, 0.87266462599716477},
		{1.1400447527693316, -0.7, 1.0471975511965976},
		{1.3657668117194071, -0.7, 1.2217304763960306},
		{1.6024686895959162, -0.7, 1.3962634015954636},
		{1.8456939983747234, -0.7, 1.5707963267948966},

		{0.0000000000000000, -0.6, 0.0000000000000000},
		{0.1748515436298835, -0.6, 0.17453292519943295},
		{0.3516050986554432, -0.6, 0.34906585039886590},
		{0.5321065257844613, -0.6, 0.52359877559829882},
		{0.7180530466448565, -0.6, 0.69813170079773179},
		{0.9108275903019598, -0.6, 0.87266462599716477},
		{1.1112333229323361, -0.6, 1.0471975511965976},
		{1.3191461190365270, -0.6, 1.2217304763960306},
		{1.5332022105084779, -0.6, 1.3962634015954636},
		{1.7507538029157523, -0.6, 1.5707963267948966},

		{0.0000000000000000, -0.5, 0.0000000000000000},
		{0.1747538551403578, -0.5, 0.17453292519943295},
		{0.3508186847010157, -0.5, 0.34906585039886590},
		{0.5294286270519057, -0.5, 0.52359877559829882},
		{0.7116472756263032, -0.5, 0.69813170079773179},
		{0.8982452359422776, -0.5, 0.87266462599716477},
		{1.0895506700518853, -0.5, 1.0471975511965976},
		{1.2853005857432933, -0.5, 1.2217304763960306},
		{1.4845545520549488, -0.5, 1.3962634015954636},
		{1.6857503548125961, -0.5, 1.5707963267948966},

		{0.0000000000000000, -0.4, 0.0000000000000000},
		{0.1746741466944152, -0.4, 0.17453292519943295},
		{0.3501822277248344, -0.4, 0.34906585039886590},
		{0.5272901591750874, -0.4, 0.52359877559829882},
		{0.7066237440734124, -0.4, 0.69813170079773179},
		{0.8885921049760215, -0.4, 0.87266462599716477},
		{1.0733136290471381, -0.4, 1.0471975511965976},
		{1.2605612170157066, -0.4, 1.2217304763960306},
		{1.4497513956433439, -0.4, 1.3962634015954636},
		{1.6399998658645112, -0.4, 1.5707963267948966},

		{0.0000000000000000, -0.3, 0.0000000000000000},
		{0.1746122865300009, -0.3, 0.17453292519943295},
		{0.3496914610279842, -0.3, 0.34906585039886590},
		{0.5256582287372630, -0.3, 0.52359877559829882},
		{0.7028422651240854, -0.3, 0.69813170079773179},
		{0.8814413919511117, -0.3, 0.87266462599716477},
		{1.0614897067260520, -0.3, 1.0471975511965976},
		{1.2428416824174220, -0.3, 1.2217304763960306},
		{1.4251795877015929, -0.3, 1.3962634015954636},
		{1.6080486199305126, -0.3, 1.5707963267948966},

		{0.0000000000000000, -0.2, 0.0000000000000000},
		{0.1745681729029280, -0.2, 0.17453292519943295},
		{0.3493431593208679, -0.2, 0.34906585039886590},
		{0.5245088052944398, -0.2, 0.52359877559829882},
		{0.7002049100984488, -0.2, 0.69813170079773179},
		{0.8765100664996797, -0.2, 0.87266462599716477},
		{1.0534305870298994, -0.2, 1.0471975511965976},
		{1.2308975521670789, -0.2, 1.2217304763960306},
		{1.4087733584990738, -0.2, 1.3962634015954636},
		{1.5868678474541662, -0.2, 1.5707963267948966},

		{0.0000000000000000, -0.1, 0.0000000000000000},
		{0.1745417335306366, -0.1, 0.17453292519943295},
		{0.3491350672146809, -0.1, 0.34906585039886590},
		{0.5238255001653895, -0.1, 0.52359877559829882},
		{0.6986470085417702, -0.1, 0.69813170079773179},
		{0.8736179258696485, -0.1, 0.87266462599716477},
		{1.0487386319621685, -0.1, 1.0471975511965976},
		{1.2239913752078759, -0.1, 1.2217304763960306},
		{1.3993423113684051, -0.1, 1.3962634015954636},
		{1.5747455615173558, -0.1, 1.5707963267948966},

		{0.0000000000000000, 0.0, 0.0000000000000000},
		{0.1745329251994329, 0.0, 0.17453292519943295},
		{0.3490658503988659, 0.0, 0.34906585039886590},
		{0.5235987755982988, 0.0, 0.52359877559829882},
		{0.6981317007977317, 0.0, 0.69813170079773179},
		{0.8726646259971647, 0.0, 0.87266462599716477},
		{1.0471975511965976, 0.0, 1.0471975511965976},
		{1.2217304763960306, 0.0, 1.2217304763960306},
		{1.3962634015954636, 0.0, 1.3962634015954636},
		{1.5707963267948966, 0.0, 1.5707963267948966},

		{0.0000000000000000, 0.1, 0.0000000000000000},
		{0.1745417335306366, 0.1, 0.17453292519943295},
		{0.3491350672146809, 0.1, 0.34906585039886590},
		{0.5238255001653895, 0.1, 0.52359877559829882},
		{0.6986470085417702, 0.1, 0.69813170079773179},
		{0.8736179258696485, 0.1, 0.87266462599716477},
		{1.0487386319621685, 0.1, 1.0471975511965976},
		{1.2239913752078759, 0.1, 1.2217304763960306},
		{1.3993423113684051, 0.1, 1.3962634015954636},
		{1.5747455615173560, 0.1, 1.5707963267948966},

		{0.0000000000000000, 0.2, 0.0000000000000000},
		{0.1745681729029280, 0.2, 0.17453292519943295},
		{0.3493431593208679, 0.2, 0.34906585039886590},
		{0.5245088052944398, 0.2, 0.52359877559829882},
		{0.7002049100984488, 0.2, 0.69813170079773179},
		{0.8765100664996797, 0.2, 0.87266462599716477},
		{1.0534305870298994, 0.2, 1.0471975511965976},
		{1.2308975521670789, 0.2, 1.2217304763960306},
		{1.4087733584990738, 0.2, 1.3962634015954636},
		{1.5868678474541662, 0.2, 1.5707963267948966},

		{0.0000000000000000, 0.3, 0.0000000000000000},
		{0.1746122865300009, 0.3, 0.17453292519943295},
		{0.3496914610279842, 0.3, 0.34906585039886590},
		{0.5256582287372630, 0.3, 0.52359877559829882},
		{0.7028422651240854, 0.3, 0.69813170079773179},
		{0.8814413919511117, 0.3, 0.87266462599716477},
		{1.0614897067260520, 0.3, 1.0471975511965976},
		{1.2428416824174220, 0.3, 1.2217304763960306},
		{1.4251795877015929, 0.3, 1.3962634015954636},
		{1.6080486199305128, 0.3, 1.5707963267948966},

		{0.0000000000000000, 0.4, 0.0000000000000000},
		{0.1746741466944152, 0.4, 0.17453292519943295},
		{0.3501822277248344, 0.4, 0.34906585039886590},
		{0.5272901591750874, 0.4, 0.52359877559829882},
		{0.7066237440734124, 0.4, 0.69813170079773179},
		{0.8885921049760215, 0.4, 0.87266462599716477},
		{1.0733136290471381, 0.4, 1.0471975511965976},
		{1.2605612170157066, 0.4, 1.2217304763960306},
		{1.4497513956433439, 0.4, 1.3962634015954636},
		{1.6399998658645112, 0.4, 1.5707963267948966},

		{0.0000000000000000, 0.5, 0.0000000000000000},
		{0.1747538551403578, 0.5, 0.17453292519943295},
		{0.3508186847010157, 0.5, 0.34906585039886590},
		{0.5294286270519057, 0.5, 0.52359877559829882},
		{0.7116472756263032, 0.5, 0.69813170079773179},
		{0.8982452359422776, 0.5, 0.87266462599716477},
		{1.0895506700518853, 0.5, 1.0471975511965976},
		{1.2853005857432933, 0.5, 1.2217304763960306},
		{1.4845545520549488, 0.5, 1.3962634015954636},
		{1.6857503548125961, 0.5, 1.5707963267948966},

		{0.0000000000000000, 0.6, 0.0000000000000000},
		{0.1748515436298835, 0.6, 0.17453292519943295},
		{0.3516050986554432, 0.6, 0.34906585039886590},
		{0.5321065257844613, 0.6, 0.52359877559829882},
		{0.7180530466448565, 0.6, 0.69813170079773179},
		{0.9108275903019598, 0.6, 0.87266462599716477},
		{1.1112333229323361, 0.6, 1.0471975511965976},
		{1.3191461190365270, 0.6, 1.2217304763960306},
		{1.5332022105084779, 0.6, 1.3962634015954636},
		{1.7507538029157526, 0.6, 1.5707963267948966},

		{0.0000000000000000, 0.7, 0.0000000000000000},
		{0.1749673746691672, 0.7, 0.17453292519943295},
		{0.3525468753567793, 0.7, 0.34906585039886590},
		{0.5353674027599713, 0.7, 0.52359877559829882},
		{0.7260379765168445, 0.7, 0.69813170079773179},
		{0.9269829634831344, 0.7, 0.87266462599716477},
		{1.1400447527693318, 0.7, 1.0471975511965976},
		{1.3657668117194073, 0.7, 1.2217304763960306},
		{1.6024686895959164, 0.7, 1.3962634015954636},
		{1.8456939983747236, 0.7, 1.5707963267948966},

		{0.0000000000000000, 0.8, 0.0000000000000000},
		{0.1751015424133889, 0.8, 0.17453292519943295},
		{0.3536506883977939, 0.8, 0.34906585039886590},
		{0.5392680440908455, 0.8, 0.52359877559829882},
		{0.7358792602807037, 0.8, 0.69813170079773179},
		{0.9477094297007117, 0.8, 0.87266462599716477},
		{1.1789022995388236, 0.8, 1.0471975511965976},
		{1.4323027881876012, 0.8, 1.2217304763960306},
		{1.7069629739121677, 0.8, 1.3962634015954636},
		{1.9953027776647294, 0.8, 1.5707963267948966},

		{0.0000000000000000, 0.9, 0.0000000000000000},
		{0.1752542737611502, 0.9, 0.17453292519943295},
		{0.3549246459129744, 0.9, 0.34906585039886590},
		{0.5438822141615712, 0.9, 0.52359877559829882},
		{0.7479740042353251, 0.9, 0.69813170079773179},
		{0.9746389845196644, 0.9, 0.87266462599716477},
		{1.2334463254523440, 0.9, 1.0471975511965976},
		{1.5355247765594915, 0.9, 1.2217304763960306},
		{1.8882928567775128, 0.9, 1.3962634015954636},
		{2.2805491384227707, 0.9, 1.5707963267948966},

		{0.0000000000000000, 1.0, 0.0000000000000000},
		{0.1754258296518182, 1.0, 0.17453292519943295},
		{0.3563785047244499, 1.0, 0.34906585039886590},
		{0.5493061443340547, 1.0, 0.52359877559829882},
		{0.7629096520666106, 1.0, 0.69813170079773179},
		{1.0106831886830212, 1.0, 0.87266462599716477},
		{1.3169578969248164, 1.0, 1.0471975511965976},
		{1.7354151626688941, 1.0, 1.2217304763960306},
		{2.4362460537158770, 1.0, 1.3962634015954636},
//		{39.1831385665,      1.0, 1.5707963267948966},
	};

	for (auto data : testcases)
	{
		auto const r = bksge::ellint_1(data.k, data.phi);
		double const tole = bksge::abs(data.expected) * error;
		EXPECT_NEAR(data.expected, (double)r, tole);
	}
}

template <typename T>
void Ellint1TestInt()
{
	double const error = 0.000000000001;

	BKSGE_CONSTEXPR auto nan = bksge::numeric_limits<double>::quiet_NaN();
	BKSGE_CONSTEXPR auto inf  = bksge::numeric_limits<double>::infinity();
	BKSGE_CONSTEXPR auto pi = bksge::pi_t<double>();

	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1(T(0), nan)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1(nan, T(0))));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1(T( 2), T(0))));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1(T(-2), T(0))));

	BKSGE_CXX14_CONSTEXPR_EXPECT_EQ(inf, bksge::ellint_1(T( 1), -pi/2));
	BKSGE_CXX14_CONSTEXPR_EXPECT_EQ(inf, bksge::ellint_1(T( 1),  pi/2));
	BKSGE_CXX14_CONSTEXPR_EXPECT_EQ(inf, bksge::ellint_1(T(-1), -pi/2));
	BKSGE_CXX14_CONSTEXPR_EXPECT_EQ(inf, bksge::ellint_1(T(-1),  pi/2));

	struct testcase
	{
		double expected;
		T      k;
		double phi;
	};

	testcase const testcases[] =
	{
		{0.0000000000000000, 0, 0.0000000000000000},
		{0.1745329251994329, 0, 0.17453292519943295},
		{0.3490658503988659, 0, 0.34906585039886590},
		{0.5235987755982988, 0, 0.52359877559829882},
		{0.6981317007977317, 0, 0.69813170079773179},
		{0.8726646259971647, 0, 0.87266462599716477},
		{1.0471975511965976, 0, 1.0471975511965976},
		{1.2217304763960306, 0, 1.2217304763960306},
		{1.3962634015954636, 0, 1.3962634015954636},
		{1.5707963267948966, 0, 1.5707963267948966},
	};

	for (auto data : testcases)
	{
		auto const r = bksge::ellint_1(data.k, data.phi);
		double const tole = bksge::abs(data.expected) * error;
		EXPECT_NEAR(data.expected, (double)r, tole);
	}
}

GTEST_TEST(CMathTest, Ellint1Test)
{
	Ellint1TestFloat<float,       float>      (0.000001);
	Ellint1TestFloat<float,       double>     (0.000001);
	Ellint1TestFloat<float,       long double>(0.000001);
	Ellint1TestFloat<double,      float>      (0.000001);
	Ellint1TestFloat<double,      double>     (0.000000000001);
	Ellint1TestFloat<double,      long double>(0.000000000001);
	Ellint1TestFloat<long double, float>      (0.000001);
	Ellint1TestFloat<long double, double>     (0.000000000001);
	Ellint1TestFloat<long double, long double>(0.000000000001);

	Ellint1TestInt<int>();
	Ellint1TestInt<short>();

	BKSGE_CONSTEXPR auto nanf = bksge::numeric_limits<float>::quiet_NaN();
	BKSGE_CONSTEXPR auto epsf = bksge::numeric_limits<float>::epsilon();
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1f(nanf, nanf)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1f(nanf, 0.0f)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1f(0.0f, nanf)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1f( 1.0f + epsf, 0.0f)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1f(-1.0f - epsf, 0.0f)));

	BKSGE_CONSTEXPR auto nanl = bksge::numeric_limits<long double>::quiet_NaN();
	BKSGE_CONSTEXPR auto epsl = bksge::numeric_limits<long double>::epsilon();
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1l(nanl, nanl)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1l(nanl, 0.0l)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1l(0.0l, nanl)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1l( 1.0l + epsl, 0.0l)));
	BKSGE_CXX14_CONSTEXPR_EXPECT_TRUE(bksge::isnan(bksge::ellint_1l(-1.0l - epsl, 0.0l)));
}

}	// namespace ellint_1_test

}	// namespace bksge_cmath_test

BKSGE_WARNING_POP();
