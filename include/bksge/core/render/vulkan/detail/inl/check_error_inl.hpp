/**
 *	@file	check_error_inl.hpp
 *
 *	@brief	CheckError 関数の実装
 *
 *	@author	myoukaku
 */

#ifndef BKSGE_CORE_RENDER_VULKAN_DETAIL_INL_CHECK_ERROR_INL_HPP
#define BKSGE_CORE_RENDER_VULKAN_DETAIL_INL_CHECK_ERROR_INL_HPP

#include <bksge/core/render/config.hpp>
#if BKSGE_CORE_RENDER_HAS_VULKAN_RENDERER

#include <bksge/core/render/vulkan/detail/check_error.hpp>
#include <bksge/core/render/vulkan/detail/vulkan_h.hpp>
#include <stdexcept>
#include <string>

namespace bksge
{

namespace render
{

namespace vk
{

BKSGE_INLINE std::string to_string(::VkResult res)
{
#define BKSGE_VK_RESULT_KVP(x) case x: return #x

	switch (res)
	{
	//BKSGE_VK_RESULT_KVP(VK_SUCCESS);
	//BKSGE_VK_RESULT_KVP(VK_NOT_READY);
	//BKSGE_VK_RESULT_KVP(VK_TIMEOUT);
	//BKSGE_VK_RESULT_KVP(VK_EVENT_SET);
	//BKSGE_VK_RESULT_KVP(VK_EVENT_RESET);
	//BKSGE_VK_RESULT_KVP(VK_INCOMPLETE);
	BKSGE_VK_RESULT_KVP(VK_ERROR_OUT_OF_HOST_MEMORY);
	BKSGE_VK_RESULT_KVP(VK_ERROR_OUT_OF_DEVICE_MEMORY);
	BKSGE_VK_RESULT_KVP(VK_ERROR_INITIALIZATION_FAILED);
	BKSGE_VK_RESULT_KVP(VK_ERROR_DEVICE_LOST);
	BKSGE_VK_RESULT_KVP(VK_ERROR_MEMORY_MAP_FAILED);
	BKSGE_VK_RESULT_KVP(VK_ERROR_LAYER_NOT_PRESENT);
	BKSGE_VK_RESULT_KVP(VK_ERROR_EXTENSION_NOT_PRESENT);
	BKSGE_VK_RESULT_KVP(VK_ERROR_FEATURE_NOT_PRESENT);
	BKSGE_VK_RESULT_KVP(VK_ERROR_INCOMPATIBLE_DRIVER);
	BKSGE_VK_RESULT_KVP(VK_ERROR_TOO_MANY_OBJECTS);
	BKSGE_VK_RESULT_KVP(VK_ERROR_FORMAT_NOT_SUPPORTED);
	BKSGE_VK_RESULT_KVP(VK_ERROR_FRAGMENTED_POOL);
	BKSGE_VK_RESULT_KVP(VK_ERROR_OUT_OF_POOL_MEMORY);
	BKSGE_VK_RESULT_KVP(VK_ERROR_INVALID_EXTERNAL_HANDLE);
	BKSGE_VK_RESULT_KVP(VK_ERROR_SURFACE_LOST_KHR);
	BKSGE_VK_RESULT_KVP(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
	//BKSGE_VK_RESULT_KVP(VK_SUBOPTIMAL_KHR);
	BKSGE_VK_RESULT_KVP(VK_ERROR_OUT_OF_DATE_KHR);
	BKSGE_VK_RESULT_KVP(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
	BKSGE_VK_RESULT_KVP(VK_ERROR_VALIDATION_FAILED_EXT);
	BKSGE_VK_RESULT_KVP(VK_ERROR_INVALID_SHADER_NV);
	BKSGE_VK_RESULT_KVP(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
	BKSGE_VK_RESULT_KVP(VK_ERROR_FRAGMENTATION_EXT);
	BKSGE_VK_RESULT_KVP(VK_ERROR_NOT_PERMITTED_EXT);
	BKSGE_VK_RESULT_KVP(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
	BKSGE_VK_RESULT_KVP(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR);
	//BKSGE_VK_RESULT_KVP(VK_ERROR_OUT_OF_POOL_MEMORY_KHR);
	//BKSGE_VK_RESULT_KVP(VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR);
	//BKSGE_VK_RESULT_KVP(VK_ERROR_INVALID_DEVICE_ADDRESS_EXT);
	default: return "unknown";
	}

#undef BKSGE_VK_RESULT_KVP
}

BKSGE_INLINE
ResultException::ResultException(::VkResult res)
	: std::runtime_error(to_string(res))
{}

BKSGE_INLINE ::VkResult CheckError(::VkResult res)
{
	if (res < 0)
	{
		throw vk::ResultException(res);
	}

	return res;
}

}	// namespace vk

}	// namespace render

}	// namespace bksge

#endif // BKSGE_CORE_RENDER_HAS_VULKAN_RENDERER

#endif // BKSGE_CORE_RENDER_VULKAN_DETAIL_INL_CHECK_ERROR_INL_HPP
